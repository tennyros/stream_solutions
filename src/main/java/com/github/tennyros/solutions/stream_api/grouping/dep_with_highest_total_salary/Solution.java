package com.github.tennyros.solutions.stream_api.grouping.dep_with_highest_total_salary;

import com.github.tennyros.solutions.stream_api.util.Employee;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç —Å –Ω–∞–∏–±–æ–ª—å—à–µ–π —Å—É–º–º–∞—Ä–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç–æ–π <br><br>
 * –ù—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Å—É–º–º–∞—Ä–Ω–∞—è
 * –∑–∞—Ä–ø–ª–∞—Ç–∞ –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ <br><br>
 * üì• –í—Ö–æ–¥: <br>
 * –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ Employee —Å –ø–æ–ª—è–º–∏: <br>
 * - name (String) <br>
 * - department (String) <br>
 * - salary (int) <br><br>
 * üì§ –í—ã—Ö–æ–¥: <br>
 * String: –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞ —Å –Ω–∞–∏–±–æ–ª—å—à–µ–π —Å—É–º–º–æ–π –∑–∞—Ä–ø–ª–∞—Ç
 * */
public class Solution {

    public static void main(String[] args) {
        List<Employee> employees = List.of(
                new Employee("Alice", "IT", 10_000),
                new Employee("Bob", "IT", 11_000),
                new Employee("Charlie", "HR", 9_000),
                new Employee("Diana", "HR", 8_500),
                new Employee("Eve", "Sales", 15_000)
        );

        System.out.println(getDepartmentWithHighestTotalSalary(employees));
    }

    public static String getDepartmentWithHighestTotalSalary(List<Employee> employees) {

        System.out.println(employees.stream()
                .collect(Collectors.groupingBy(
                        Employee::getDepartment,
                        Collectors.summingInt(Employee::getSalary)
                )));
        return employees.stream()
                .collect(Collectors.groupingBy(
                        Employee::getDepartment,
                        Collectors.summingInt(Employee::getSalary)
                ))
                .entrySet().stream()
                .max(Map.Entry.comparingByValue())
                .map(Map.Entry::getKey)
                .orElse("");
    }

}
