package com.github.tennyros.solutions.stream_api.grouping.experienced_employees;

import com.github.tennyros.solutions.stream_api.util.Employee;

import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * <b>–°–∞–º—ã–µ –æ–ø—ã—Ç–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –≤ –∫–∞–∂–¥–æ–º –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–µ</b>
 * <br></br>
 * –ù—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥:
 * <br>
 * public static Map<String, List<String>> topExperiencedEmployeesByDepartment(List<Employee> employees, int topN)
 * <br>
 * üîπ –ú–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å Map<–¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç, —Å–ø–∏—Å–æ–∫ –∏–º—ë–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤>, –≥–¥–µ —Å–ø–∏—Å–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç top N —Å–∞–º—ã—Ö –æ–ø—ã—Ç–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ –∫–∞–∂–¥–æ–≥–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞.
 * <br>
 * üîπ –ï—Å–ª–∏ –≤ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–µ –º–µ–Ω—å—à–µ N —á–µ–ª–æ–≤–µ–∫ ‚Äî –≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ—Ö.
 * <br>
 * üîπ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ ‚Äî –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—Ç–∞–∂–∞.
 */
public class Solution {

    public static void main(String[] args) {
        List<Employee> employees = List.of(
                new Employee("John", "IT", 4, 105004),
                new Employee("Jane", "IT", 6, 92506),
                new Employee("Jessy", "IT", 3, 8700),
                new Employee("Base", "HR", 5, 7700),
                new Employee("Home", "HR", 2, 10700),
                new Employee("Smith", "Sales", 8, 11000),
                new Employee("Sam", "Sales", 2, 9000),
                new Employee("Sara", "Sales", 6, 13000)
        );

        System.out.println(topExperiencedEmployeesByDepartment(employees, 2));
    }

    public static Map<String, List<String>> topExperiencedEmployeesByDepartment(List<Employee> employees, int topN) {
        return employees.stream()
                .collect(Collectors.groupingBy(
                        Employee::getDepartment,
                        Collectors.collectingAndThen(
                                Collectors.toList(),
                                list -> list.stream()
                                        .sorted(Comparator.comparingInt(Employee::getYearsOfExperience).reversed())
                                        .limit(topN)
                                        .map(Employee::getName)
                                        .collect(Collectors.toList())
                        )
                ));
    }

}
