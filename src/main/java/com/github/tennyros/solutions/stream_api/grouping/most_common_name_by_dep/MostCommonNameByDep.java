package com.github.tennyros.solutions.stream_api.grouping.most_common_name_by_dep;

import com.github.tennyros.solutions.stream_api.util.Employee;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * –°–∞–º–æ–µ –ø–æ–ø—É–ª—è—Ä–Ω–æ–µ –∏–º—è –≤ –∫–∞–∂–¥–æ–º –æ—Ç–¥–µ–ª–µ <br><br>
 * –£ —Ç–µ–±—è –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤. –£ –∫–∞–∂–¥–æ–≥–æ –µ—Å—Ç—å: <br>
 * - String name <br>
 * - String department <br>
 * - int age <br>
 * - int salary <br><br>
 * –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥: <br>
 * public static Map<String, String> mostCommonNameByDepartment(List<Employee> employees) <br>
 * üîπ –ì–¥–µ –∫–ª—é—á ‚Äî —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞, <br>
 * üîπ –ó–Ω–∞—á–µ–Ω–∏–µ ‚Äî —Å–∞–º–æ–µ —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—â–µ–µ—Å—è –∏–º—è –≤ —ç—Ç–æ–º –æ—Ç–¥–µ–ª–µ. <br>
 * üîπ –ü—Ä–∏ —Ä–∞–≤–µ–Ω—Å—Ç–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ ‚Äî –≤–∑—è—Ç—å –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ –Ω–∞–∏–º–µ–Ω—å—à–µ–µ –∏–º—è.
 * */
public class MostCommonNameByDep {

    public static void main(String[] args) {
        List<Employee> employees = List.of(
                new Employee("Alice", "IT", 28, 10000),
                new Employee("Bob", "IT", 24, 11000),
                new Employee("Alice", "IT", 29, 12000),
                new Employee("Charlie", "HR", 30, 9000),
                new Employee("Diana", "HR", 25, 9500),
                new Employee("Diana", "HR", 28, 9900),
                new Employee("Eve", "Sales", 29, 10500),
                new Employee("Eve", "Sales", 31, 11000)
        );

        System.out.println(mostCommonNameByDepartment(employees));
    }

    public static Map<String, String> mostCommonNameByDepartment(List<Employee> employees) {
        return employees.stream()
                .collect(Collectors.groupingBy(
                        Employee::getDepartment,
                        Collectors.collectingAndThen(
                                Collectors.groupingBy(
                                        Employee::getName,
                                        Collectors.counting()
                                ),
                                namesCountMap -> namesCountMap.entrySet().stream()
                                        .max(Map.Entry.<String, Long>comparingByValue()
                                                .thenComparing(Map.Entry.comparingByKey()))
                                        .map(Map.Entry::getKey)
                                        .orElse(null)
                        )
                ));
    }

}
